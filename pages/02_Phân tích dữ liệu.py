import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import math
from datetime import timedelta

st.set_page_config(
    page_title="EDA ƒê∆°n h√†ng, S·∫£n ph·∫©m & Kh√°ch h√†ng",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ================== CSS ==================
st.markdown("""
<style>
.analysis-box {
    padding: 0.9rem 1rem;
    border-left: 4px solid #4b8bec;
    background: #f0f7ff;
    border-radius: 4px;
    font-size: 0.9rem;
    line-height: 1.4rem;
}
.analysis-box h4 {
    margin-top: 0;
    margin-bottom: 0.4rem;
    font-size: 1rem;
}
.strategy-box {
    padding: 0.9rem 1rem;
    border-left: 4px solid #d27d2d;
    background: #fff5eb;
    border-radius: 4px;
    font-size: 0.9rem;
    line-height: 1.35rem;
}
.strategy-box h4 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-size: 1rem;
}
.weekday-box {
    padding: 0.75rem 1rem;
    border-left: 4px solid #7b4ded;
    background:#f4f0ff;
    border-radius:6px;
    font-size:0.82rem;
    line-height:1.3rem;
}
.abc-box {
    padding: 0.75rem 1rem;
    background:#fff7e6;
    border:1px solid #f0d28a;
    border-radius:6px;
    font-size:0.85rem;
    line-height:1.3rem;
    margin-top:0.75rem;
    margin-bottom:0.75rem;
}
.info-box {
    padding:0.65rem 0.9rem;
    background:#f5f9ff;
    border:1px solid #c8dcf5;
    border-radius:6px;
    font-size:0.8rem;
    line-height:1.25rem;
    margin-top:0.5rem;
}
</style>
""", unsafe_allow_html=True)

# ================== H√ÄM TI·ªÜN √çCH ==================
def style_big_number(v):
    if v >= 1e9: return f"{v/1e9:.2f}B"
    if v >= 1e6: return f"{v/1e6:.2f}M"
    if v >= 1e3: return f"{v/1e3:.1f}K"
    return f"{v:.0f}"

def rename_for_display(df: pd.DataFrame, mapping: dict):
    return df.rename(columns={k: v for k, v in mapping.items() if k in df.columns})

@st.cache_data(show_spinner=True, ttl=3600)
def load_data(path: str):
    return pd.read_csv(path)

# ================== H√ÄM T√çNH CH·ªà S·ªê ==================
@st.cache_data(show_spinner=False)
def compute_daily_metrics(df: pd.DataFrame):
    return (df.groupby("order_date")
              .agg(orders=("order_id","nunique"),
                   revenue=("order_value","sum"),
                   customers=("customer_id","nunique"))
              .reset_index())

@st.cache_data(show_spinner=False)
def compute_category_metrics(df: pd.DataFrame, top_n=15):
    cat = (df.groupby("category")
           .agg(orders=("order_id","nunique"),
                revenue=("order_value","sum"),
                customers=("customer_id","nunique"),
                quantity=("quantity","sum"))
           .reset_index()
           .sort_values("revenue", ascending=False))
    cat["revenue_share_%"] = cat["revenue"] / cat["revenue"].sum() * 100
    if len(cat) > top_n:
        others = cat.iloc[top_n:].copy()
        top = cat.iloc[:top_n].copy()
        row_other = {
            "category": "OTHERS",
            "orders": others["orders"].sum(),
            "revenue": others["revenue"].sum(),
            "customers": others["customers"].sum(),
            "quantity": others["quantity"].sum(),
            "revenue_share_%": others["revenue"].sum() / cat["revenue"].sum() * 100
        }
        top = pd.concat([top, pd.DataFrame([row_other])], ignore_index=True)
        return top
    return cat

@st.cache_data(show_spinner=False)
def compute_product_metrics(df: pd.DataFrame, top_n=20):
    if "product_id" not in df.columns:
        return pd.DataFrame()
    prod = (df.groupby(["product_id","product_name"])
            .agg(orders=("order_id","nunique"),
                 revenue=("order_value","sum"),
                 quantity=("quantity","sum"),
                 customers=("customer_id","nunique"))
            .reset_index())
    prod["rev_per_order"] = prod["revenue"] / prod["orders"].replace(0, np.nan)
    return prod.sort_values("revenue", ascending=False).head(top_n)

@st.cache_data(show_spinner=False)
def compute_customer_metrics(df: pd.DataFrame):
    cust = (df.groupby("customer_id")
            .agg(orders=("order_id","nunique"),
                 revenue=("order_value","sum"),
                 first_date=("order_date","min"),
                 last_date=("order_date","max"))
            .reset_index())
    cust["lifetime_days"] = (cust["last_date"] - cust["first_date"]).dt.days.clip(lower=0)
    cust["avg_order_value_customer"] = cust["revenue"] / cust["orders"].replace(0, np.nan)
    return cust

@st.cache_data(show_spinner=False)
def compute_weekday_summary(df: pd.DataFrame):
    t = df.copy()
    t["weekday"] = t["order_date"].dt.weekday
    return (t.groupby("weekday")
              .agg(revenue=("order_value","sum"),
                   orders=("order_id","nunique"))
              .reset_index())

@st.cache_data(show_spinner=True)
def compute_product_advanced(df: pd.DataFrame):
    if "product_id" not in df.columns:
        return pd.DataFrame(), 0
    min_date = df["order_date"].min()
    max_date = df["order_date"].max()
    observed_days_total = (max_date - min_date).days + 1

    daily_prod = (df.groupby(["product_id","product_name","order_date"])
                    .agg(daily_units=("quantity","sum"),
                         daily_revenue=("order_value","sum"))
                    .reset_index())

    base = (df.groupby(["product_id","product_name"])
              .agg(first_sale=("order_date","min"),
                   last_sale=("order_date","max"),
                   total_units=("quantity","sum"),
                   total_revenue=("order_value","sum"),
                   customers_total=("customer_id","nunique"))
              .reset_index())

    active_days_df = (daily_prod.groupby("product_id")["order_date"]
                      .nunique()
                      .reset_index()
                      .rename(columns={"order_date":"active_days"}))
    base = base.merge(active_days_df, on="product_id", how="left")

    stats_list = []
    for pid, grp in daily_prod.groupby("product_id"):
        vals = grp["daily_units"].values.astype(float)
        sum_units = vals.sum()
        mean_all = sum_units / observed_days_total if observed_days_total > 0 else 0
        if observed_days_total > 1:
            sum_sq = np.sum(vals**2)
            variance = (sum_sq - (sum_units**2)/observed_days_total) / (observed_days_total - 1)
            variance = max(variance, 0)
            std_all = math.sqrt(variance)
        else:
            std_all = 0
        demand_cv = std_all / mean_all if mean_all > 0 else np.nan
        stats_list.append({
            "product_id": pid,
            "mean_daily_all": mean_all,
            "std_daily_all": std_all,
            "demand_cv": demand_cv
        })
    stats_df = pd.DataFrame(stats_list)
    base = base.merge(stats_df, on="product_id", how="left")

    rep_records = []
    pud = df.groupby(["product_id","customer_id"])["order_date"].apply(lambda s: sorted(set(s))).reset_index()
    for pid, sub in pud.groupby("product_id"):
        diffs_all = []
        repeat_customers = 0
        for _, row in sub.iterrows():
            dates = row["order_date"]
            if len(dates) >= 2:
                repeat_customers += 1
                diffs = np.diff(dates)
                diffs_days = [d.days for d in diffs if d.days >= 0]
                diffs_all.extend(diffs_days)
        if diffs_all:
            inter_median = float(np.median(diffs_all))
            inter_mean = float(np.mean(diffs_all))
        else:
            inter_median = np.nan
            inter_mean = np.nan
        rep_records.append({
            "product_id": pid,
            "customers_repeat": repeat_customers,
            "interpurchase_median_days": inter_median,
            "interpurchase_mean_days": inter_mean
        })
    rep_df = pd.DataFrame(rep_records)
    base = base.merge(rep_df, on="product_id", how="left")

    base["lifecycle_days"] = (base["last_sale"] - base["first_sale"]).dt.days + 1
    base["days_since_last"] = (max_date - base["last_sale"]).dt.days
    base["coverage"] = base["active_days"] / observed_days_total
    base["repeat_rate_product"] = base["customers_repeat"] / base["customers_total"].replace(0, np.nan)
    base["repeat_rate_product"] = base["repeat_rate_product"].fillna(0)

    def classify_variability(cv):
        if pd.isna(cv): return "Thi·∫øu d·ªØ li·ªáu"
        if cv < 0.5: return "·ªîn ƒë·ªãnh"
        if cv < 1: return "Bi·∫øn ƒë·ªông v·ª´a"
        return "Bi·∫øn ƒë·ªông cao"
    base["variability_class"] = base["demand_cv"].apply(classify_variability)

    base = base.sort_values("total_revenue", ascending=False)
    base["cum_revenue"] = base["total_revenue"].cumsum()
    total_rev_all = base["total_revenue"].sum()
    base["cum_share"] = base["cum_revenue"] / total_rev_all * 100

    def abc_label(cshare):
        if cshare <= 80: return "A"
        if cshare <= 95: return "B"
        return "C"
    base["abc_class"] = base["cum_share"].apply(abc_label)

    cols = [
        "product_id","product_name","first_sale","last_sale","lifecycle_days",
        "days_since_last","active_days","coverage","total_units","total_revenue",
        "customers_total","customers_repeat","repeat_rate_product",
        "mean_daily_all","std_daily_all","demand_cv","variability_class",
        "interpurchase_median_days","interpurchase_mean_days","abc_class","cum_share"
    ]
    for c in cols:
        if c not in base.columns: base[c] = np.nan
    return base[cols], observed_days_total

# ================== SIDEBAR ==================
st.sidebar.title("‚öôÔ∏è B·ªô l·ªçc")
data_path = st.sidebar.text_input("ƒê∆∞·ªùng d·∫´n file CSV", "data/orders_full.csv")
allow_upload = st.sidebar.checkbox("Upload file kh√°c?", False)
up = st.sidebar.file_uploader("Ch·ªçn CSV", type=["csv"]) if allow_upload else None
if st.sidebar.button("‚Üª X√≥a cache"):
    st.cache_data.clear()

# ================== LOAD & CHU·∫®N H√ìA ==================
if up is not None:
    raw_df = load_data(up)
    source_label = "Uploaded"
else:
    try:
        raw_df = load_data(data_path)
        source_label = data_path
    except Exception as e:
        st.error(f"L·ªói ƒë·ªçc file: {e}")
        st.stop()

expected = ["member_number","order_id","date","product_id","product_name","category","items","price","gross_sales"]
missing = [c for c in expected if c not in raw_df.columns]
if missing:
    st.error(f"Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {missing}")
    st.stop()

df = raw_df.copy()
df["order_date"] = pd.to_datetime(df["date"], errors="coerce")
if df["order_date"].isna().all():
    st.error("Kh√¥ng parse ƒë∆∞·ª£c c·ªôt ng√†y (date).")
    st.stop()
raw_df["_date_parsed"] = pd.to_datetime(raw_df["date"], errors="coerce")

df["customer_id"] = df["member_number"]
df["quantity"] = df["items"]
df["unit_price"] = df["price"]
df["order_value"] = df["gross_sales"]

# L·ªçc th·ªùi gian
min_date = df["order_date"].min()
max_date = df["order_date"].max()
date_range = st.sidebar.date_input(
    "Kho·∫£ng ng√†y",
    value=(min_date.date(), max_date.date()),
    min_value=min_date.date(),
    max_value=max_date.date()
)
if isinstance(date_range, tuple):
    start_date, end_date = date_range
else:
    start_date = date_range
    end_date = date_range
mask = (df["order_date"] >= pd.to_datetime(start_date)) & (df["order_date"] <= pd.to_datetime(end_date) + pd.Timedelta(days=1) - pd.Timedelta(seconds=1))
df = df.loc[mask].copy()

st.sidebar.markdown("---")
st.sidebar.markdown(f"Ngu·ªìn: {source_label}")
st.sidebar.markdown(f"S·ªë d√≤ng: **{len(df)}**")

if df.empty:
    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu sau khi l·ªçc.")
    st.stop()

# ================== KPI ==================
st.title("üìä Ph√¢n t√≠ch ƒë∆°n h√†ng, s·∫£n ph·∫©m v√† kh√°ch h√†ng")
total_revenue = df["order_value"].sum()
total_orders = df["order_id"].nunique()
total_customers = df["customer_id"].nunique()
aov = total_revenue / total_orders if total_orders else 0
cust_order_counts = df.groupby("customer_id")["order_id"].nunique()
repeat_rate = cust_order_counts[cust_order_counts >= 2].count() / total_customers * 100 if total_customers else 0
rev_per_customer = total_revenue / total_customers if total_customers else 0

help_text = {
    "Doanh thu": "T·ªïng order_value (gross_sales) trong kho·∫£ng th·ªùi gian ƒë√£ l·ªçc.",
    "S·ªë ƒë∆°n": "S·ªë order_id duy nh·∫•t trong kho·∫£ng th·ªùi gian ƒëang xem.",
    "S·ªë kh√°ch": "S·ªë customer_id duy nh·∫•t c√≥ ph√°t sinh √≠t nh·∫•t 1 ƒë∆°n.",
    "Gi√° tr·ªã TB/ƒê∆°n": "Average Order Value = Doanh thu / S·ªë ƒë∆°n.",
    "T·ª∑ l·ªá mua l·∫°i": "% kh√°ch c√≥ t·ª´ 2 ƒë∆°n tr·ªü l√™n (kh√°ch mua ‚â•2 / t·ªïng kh√°ch * 100).",
    "Doanh thu TB/Kh√°ch": "Doanh thu trung b√¨nh tr√™n m·ªói kh√°ch = Doanh thu / S·ªë kh√°ch."
}

c1, c2, c3, c4, c5, c6 = st.columns(6)
c1.metric("Doanh thu", style_big_number(total_revenue), help=help_text["Doanh thu"])
c2.metric("S·ªë ƒë∆°n", style_big_number(total_orders), help=help_text["S·ªë ƒë∆°n"])
c3.metric("S·ªë kh√°ch", style_big_number(total_customers), help=help_text["S·ªë kh√°ch"])
c4.metric("Gi√° tr·ªã TB/ƒê∆°n", f"{aov:,.0f}", help=help_text["Gi√° tr·ªã TB/ƒê∆°n"])
c5.metric("T·ª∑ l·ªá mua l·∫°i", f"{repeat_rate:.1f}%", help=help_text["T·ª∑ l·ªá mua l·∫°i"])
c6.metric("Doanh thu TB/Kh√°ch", f"{rev_per_customer:,.0f}", help=help_text["Doanh thu TB/Kh√°ch"])

st.markdown("---")

# ================== TABS (ƒê√É ƒê·ªîI TH·ª® T·ª∞: Heatmap SAU Ph√¢n t√≠ch n√¢ng cao) ==================
tab_overview, tab_category, tab_product, tab_customers, tab_adv_product, tab_heatmap, tab_download = st.tabs([
    "üìà T·ªïng quan",
    "üè∑Ô∏è Ng√†nh h√†ng",
    "üì¶ S·∫£n ph·∫©m",
    "üë• Kh√°ch h√†ng",
    "üî¨ Ph√¢n t√≠ch n√¢ng cao",
    "üóìÔ∏è Heatmap tu·∫ßn",
    "‚¨áÔ∏è Xu·∫•t d·ªØ li·ªáu"
])

# -------- T·ªïng quan ----------
with tab_overview:
    st.subheader("Xu h∆∞·ªõng theo th·ªùi gian")
    gran = st.selectbox("ƒê·ªô chi ti·∫øt", ["Ng√†y","Tu·∫ßn","Th√°ng"], key="gran_main")
    daily = compute_daily_metrics(df).sort_values("order_date")
    if gran == "Ng√†y":
        plot_df = daily
    elif gran == "Tu·∫ßn":
        plot_df = (daily.assign(week=lambda d: d["order_date"].dt.to_period("W").apply(lambda r: r.start_time))
                   .groupby("week")
                   .agg(orders=("orders","sum"),
                        revenue=("revenue","sum"),
                        customers=("customers","sum"))
                   .reset_index()
                   .rename(columns={"week":"order_date"}))
    else:
        plot_df = (daily.assign(month=lambda d: d["order_date"].dt.to_period("M").dt.to_timestamp())
                   .groupby("month")
                   .agg(orders=("orders","sum"),
                        revenue=("revenue","sum"),
                        customers=("customers","sum"))
                   .reset_index()
                   .rename(columns={"month":"order_date"}))
    plot_df_vn = rename_for_display(plot_df, {
        "order_date":"Ng√†y","revenue":"Doanh thu","orders":"S·ªë ƒë∆°n","customers":"S·ªë kh√°ch"
    })
    c_rev = (alt.Chart(plot_df_vn)
             .mark_line(point=True)
             .encode(
                 x=alt.X("Ng√†y:T", title="Ng√†y"),
                 y=alt.Y("Doanh thu:Q", title="Doanh thu"),
                 tooltip=["Ng√†y:T","Doanh thu:Q","S·ªë ƒë∆°n:Q","S·ªë kh√°ch:Q"]
             ).properties(height=300, title="Doanh thu theo th·ªùi gian"))
    c_orders = (alt.Chart(plot_df_vn)
                .mark_bar()
                .encode(
                    x=alt.X("Ng√†y:T", title="Ng√†y"),
                    y=alt.Y("S·ªë ƒë∆°n:Q", title="S·ªë ƒë∆°n"),
                    tooltip=["Ng√†y:T","S·ªë ƒë∆°n:Q"]
                ).properties(height=150, title="S·ªë ƒë∆°n theo th·ªùi gian"))
    st.altair_chart(c_rev, use_container_width=True)
    st.altair_chart(c_orders, use_container_width=True)

    # So s√°nh tƒÉng tr∆∞·ªüng gi·ªØa 2 nƒÉm
    st.markdown("### So s√°nh tƒÉng tr∆∞·ªüng gi·ªØa 2 nƒÉm")
    years_available = sorted(df["order_date"].dt.year.unique())
    if len(years_available) >= 2:
        default_curr = years_available[-1]
        default_prev = years_available[-2]
        coly1, coly2, coly3 = st.columns([1,1,2])
        with coly1:
            year_curr = st.selectbox("NƒÉm hi·ªán t·∫°i", years_available, index=years_available.index(default_curr))
        with coly2:
            year_prev = st.selectbox("NƒÉm so s√°nh", [y for y in years_available if y != year_curr],
                                     index=0 if default_prev != year_curr else 0)
        with coly3:
            metric_choice = st.selectbox("Ch·ªâ ti√™u", ["Doanh thu","S·ªë ƒë∆°n","S·ªë kh√°ch"])
        metric_map = {"Doanh thu":"revenue","S·ªë ƒë∆°n":"orders","S·ªë kh√°ch":"customers"}
        metric_col = metric_map[metric_choice]

        month_agg = (daily.assign(year=daily["order_date"].dt.year,
                                  month=daily["order_date"].dt.month)
                           .groupby(["year","month"])
                           .agg(orders=("orders","sum"),
                                revenue=("revenue","sum"),
                                customers=("customers","sum"))
                           .reset_index())
        subset = month_agg[month_agg["year"].isin([year_prev, year_curr])].copy()
        if subset.empty:
            st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu cho 2 nƒÉm ƒë√£ ch·ªçn.")
        else:
            subset["NƒÉm"] = subset["year"].astype(str)
            subset["Th√°ng"] = subset["month"].astype(int).astype(str)
            plot_metric_df = subset[["NƒÉm","Th√°ng", metric_col]].rename(columns={metric_col:"Gi√° tr·ªã"})
            line_yoy = ( alt.Chart(plot_metric_df)
                         .mark_line(point=True)
                         .encode(
                             x=alt.X("Th√°ng:O", sort=None, title="Th√°ng"),
                             y=alt.Y("Gi√° tr·ªã:Q", title=metric_choice),
                             color=alt.Color("NƒÉm:N"),
                             tooltip=["NƒÉm","Th√°ng","Gi√° tr·ªã:Q"]
                         ).properties(height=300, title=f"{metric_choice} theo th√°ng - So s√°nh {year_prev} vs {year_curr}") )
            pivot = plot_metric_df.pivot(index="Th√°ng", columns="NƒÉm", values="Gi√° tr·ªã").reset_index()
            if str(year_prev) in pivot.columns and str(year_curr) in pivot.columns:
                pivot["TƒÉng tr∆∞·ªüng %"] = (pivot[str(year_curr)] - pivot[str(year_prev)]) / pivot[str(year_prev)].replace(0, np.nan) * 100
                yoy_bar = (alt.Chart(pivot)
                           .mark_bar()
                           .encode(
                               x=alt.X("Th√°ng:O", title="Th√°ng"),
                               y=alt.Y("TƒÉng tr∆∞·ªüng %:Q", title="TƒÉng tr∆∞·ªüng %"),
                               tooltip=["Th√°ng","TƒÉng tr∆∞·ªüng %:Q"]
                           ).properties(height=220, title="TƒÉng tr∆∞·ªüng % theo th√°ng (YoY)"))
                st.altair_chart(line_yoy, use_container_width=True)
                st.altair_chart(yoy_bar, use_container_width=True)

                total_prev = pivot[str(year_prev)].sum()
                total_curr = pivot[str(year_curr)].sum()
                growth_total = (total_curr - total_prev) / total_prev * 100 if total_prev else np.nan
                best_month = pivot.loc[pivot["TƒÉng tr∆∞·ªüng %"].idxmax()] if pivot["TƒÉng tr∆∞·ªüng %"].notna().any() else None
                worst_month = pivot.loc[pivot["TƒÉng tr∆∞·ªüng %"].idxmin()] if pivot["TƒÉng tr∆∞·ªüng %"].notna().any() else None
                lines_growth = [
                    f"- T·ªïng {metric_choice} {year_prev}: {total_prev:,.0f}",
                    f"- T·ªïng {metric_choice} {year_curr}: {total_curr:,.0f}",
                    f"- TƒÉng tr∆∞·ªüng t·ªïng: {growth_total:+.1f}%" if not np.isnan(growth_total) else "- Kh√¥ng t√≠nh ƒë∆∞·ª£c tƒÉng tr∆∞·ªüng t·ªïng"
                ]
                if best_month is not None and not np.isnan(best_month["TƒÉng tr∆∞·ªüng %"]):
                    lines_growth.append(f"- Th√°ng tƒÉng m·∫°nh nh·∫•t: {best_month['Th√°ng']} ({best_month['TƒÉng tr∆∞·ªüng %']:+.1f}%)")
                if worst_month is not None and not np.isnan(worst_month["TƒÉng tr∆∞·ªüng %"]):
                    lines_growth.append(f"- Th√°ng gi·∫£m m·∫°nh nh·∫•t: {worst_month['Th√°ng']} ({worst_month['TƒÉng tr∆∞·ªüng %']:+.1f}%)")

                if metric_choice == "Doanh thu":
                    curr_year_data = month_agg[month_agg["year"] == year_curr].copy()
                    if not curr_year_data.empty:
                        top2 = curr_year_data.sort_values("revenue", ascending=False).head(2)
                        if len(top2) == 1:
                            m1 = int(top2.iloc[0]["month"])
                            r1 = top2.iloc[0]["revenue"]
                            lines_growth.append(f"- Top th√°ng doanh thu {year_curr}: Th√°ng {m1} ({r1:,.0f})")
                        elif len(top2) == 2:
                            m1 = int(top2.iloc[0]["month"]); r1 = top2.iloc[0]["revenue"]
                            m2 = int(top2.iloc[1]["month"]); r2 = int(top2.iloc[1]["revenue"])
                            lines_growth.append(f"- Top 2 th√°ng doanh thu {year_curr}: Th√°ng {m1} ({r1:,.0f}), Th√°ng {m2} ({r2:,.0f})")

                st.markdown(f"""
                <div class="analysis-box">
                <h4>üìå T√≥m t·∫Øt tƒÉng tr∆∞·ªüng {metric_choice}</h4>
                {'<br>'.join(lines_growth)}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.altair_chart(line_yoy, use_container_width=True)
                st.info("Thi·∫øu d·ªØ li·ªáu ƒë·ªÉ t√≠nh YoY %.")          
    else:
        st.info("D·ªØ li·ªáu ch∆∞a ƒë·ªß 2 nƒÉm ƒë·ªÉ so s√°nh.")

    st.markdown("### Ph√¢n b·ªë gi√° tr·ªã ƒë∆°n h√†ng")
    ov = df.groupby("order_id")["order_value"].sum().reset_index().rename(columns={"order_value":"Gi√° tr·ªã ƒë∆°n"})
    hist = (alt.Chart(ov)
            .mark_bar()
            .encode(
                alt.X("Gi√° tr·ªã ƒë∆°n:Q", bin=alt.Bin(maxbins=40), title="Gi√° tr·ªã ƒë∆°n"),
                y=alt.Y("count():Q", title="S·ªë ƒë∆°n"),
                tooltip=[alt.Tooltip("count():Q", title="S·ªë ƒë∆°n")]
            ).properties(height=250, title="Ph√¢n b·ªë gi√° tr·ªã ƒë∆°n h√†ng"))
    st.altair_chart(hist, use_container_width=True)

    # -------- Ph√¢n t√≠ch nhanh & G·ª£i √Ω chi·∫øn l∆∞·ª£c song song ----------
    try:
        num_days = (df["order_date"].max() - df["order_date"].min()).days + 1
        daily = daily  # ƒë√£ c√≥
        avg_rev_day = daily["revenue"].mean()
        peak_row = daily.loc[daily["revenue"].idxmax()]
        peak_date, peak_rev = peak_row["order_date"], peak_row["revenue"]
        top7_share = (daily.sort_values("revenue", ascending=False).head(7)["revenue"].sum() /
                      daily["revenue"].sum() * 100 if len(daily) >= 7 else np.nan)
        median_order_value = ov["Gi√° tr·ªã ƒë∆°n"].median()
        p90_order_value = ov["Gi√° tr·ªã ƒë∆°n"].quantile(0.90)
        start_current = df["order_date"].min()
        end_current = df["order_date"].max()
        period_len = (end_current - start_current).days + 1
        prev_start2 = start_current - timedelta(days=period_len)
        prev_end2 = start_current - timedelta(days=1)
        raw_prev_mask = (raw_df["_date_parsed"] >= prev_start2) & (raw_df["_date_parsed"] <= prev_end2)
        prev_df = raw_df.loc[raw_prev_mask].copy()
        prev_df["order_value_prev"] = prev_df["gross_sales"]
        prev_revenue = prev_df["order_value_prev"].sum() if not prev_df.empty else np.nan
        growth_pct = (total_revenue - prev_revenue) / prev_revenue * 100 if (not np.isnan(prev_revenue) and prev_revenue > 0) else np.nan
        mean_ov = ov["Gi√° tr·ªã ƒë∆°n"].mean()
        std_ov = ov["Gi√° tr·ªã ƒë∆°n"].std()
        cv_ov = std_ov / mean_ov if mean_ov > 0 else np.nan
        p90_median_ratio = (p90_order_value / median_order_value) if median_order_value > 0 else np.nan

        # --- N·ªôi dung ph√¢n t√≠ch (fact) ---
        lines = [
            f"- Kho·∫£ng ng√†y: {start_current.date()} ‚Üí {end_current.date()} ({num_days} ng√†y).",
            f"- Doanh thu b√¨nh qu√¢n/ng√†y: {avg_rev_day:,.0f}.",
            f"- Ng√†y cao nh·∫•t: {peak_date.date()} (doanh thu {peak_rev:,.0f}).",
            f"- Gi√° tr·ªã ƒë∆°n trung v·ªã: {median_order_value:,.0f}; P90: {p90_order_value:,.0f}."
        ]
        if not np.isnan(top7_share):
            lines.append(f"- Top 7 ng√†y chi·∫øm {top7_share:.1f}% doanh thu.")
        if not np.isnan(cv_ov):
            lines.append(f"- CV gi√° tr·ªã ƒë∆°n: {cv_ov:.2f}.")
        if not np.isnan(growth_pct):
            lines.append(f"- TƒÉng tr∆∞·ªüng so k·ª≥ tr∆∞·ªõc: {growth_pct:+.1f}% (Tr∆∞·ªõc: {prev_revenue:,.0f}).")
        else:
            lines.append("- Thi·∫øu d·ªØ li·ªáu ƒë·ªÉ so s√°nh k·ª≥ tr∆∞·ªõc.")
        if not np.isnan(p90_median_ratio):
            lines.append(f"- P90/Median = {p90_median_ratio:.2f} (ƒë·ªô ph√¢n t√°n gi√° tr·ªã ƒë∆°n).")

        # --- Sinh g·ª£i √Ω chi·∫øn l∆∞·ª£c (insight/action) ---
        strategy_lines = []
        # Ph√°t hi·ªán kh√¥ng c√≥ spike
        if not np.isnan(top7_share) and top7_share < 25:
            strategy_lines.append(f"Doanh thu ph√¢n b·ªï ph·∫≥ng (Top 7 ng√†y ch·ªâ {top7_share:.1f}%): g·∫ßn nh∆∞ kh√¥ng c√≥ spike ‚Üí t·∫°o 'hero campaign' theo ch·ªß ƒë·ªÅ ƒë·ªÉ k√≠ch c·∫ßu (Flash Sale 1 ng√†y / Payday).")
        elif not np.isnan(top7_share) and top7_share < 35:
            strategy_lines.append(f"Ph√¢n b·ªï kh√° ƒë·ªÅu (Top 7 ng√†y {top7_share:.1f}%). C√≥ th·ªÉ ch·ªß ƒë·ªông t·∫°o 1‚Äì2 ƒë·ªânh ƒë·ªÉ t·ªëi ∆∞u hi·ªáu ·ª©ng FOMO.")
        elif not np.isnan(top7_share) and top7_share > 55:
            strategy_lines.append("Doanh thu qu√° t·∫≠p trung v√†o √≠t ng√†y ‚Üí ph√¢n t√°n r·ªßi ro b·∫±ng mini-campaign v√†o c√°c ng√†y y·∫øu.")

        # TƒÉng tr∆∞·ªüng
        if not np.isnan(growth_pct):
            if growth_pct < 0:
                strategy_lines.append("Gi·∫£m tƒÉng tr∆∞·ªüng: ƒëi·ªÅu tra funnel (traffic ngu·ªìn, t·ª∑ l·ªá chuy·ªÉn ƒë·ªïi, repeat) + t√°i k√≠ch ho·∫°t qua email/Zalo workflow.")
            elif growth_pct < 10:
                strategy_lines.append("TƒÉng tr∆∞·ªüng nh·∫π: t·∫≠p trung t·ªëi ∆∞u chuy·ªÉn ƒë·ªïi & n√¢ng AOV tr∆∞·ªõc khi m·ªü r·ªông chi ph√≠ qu·∫£ng c√°o.")
            else:
                strategy_lines.append("TƒÉng tr∆∞·ªüng t·ªët: chu·∫©n ho√° playbook k√™nh hi·ªáu qu·∫£ v√† scale ng√¢n s√°ch theo CPA m·ª•c ti√™u.")
        else:
            strategy_lines.append("Ch∆∞a c√≥ baseline tƒÉng tr∆∞·ªüng ‚Üí gi·ªØ log tu·∫ßn & d·ª±ng ph√¢n t√≠ch h·ªìi c·ª©u ƒë·ªÉ ph√¢n t√°ch kh√°ch h√†ng quay l·∫°i so v·ªõi kh√°ch h√†ng m·ªõi.")

        # Repeat rate
        if repeat_rate < 20:
            strategy_lines.append("Repeat th·∫•p (<20%): x√¢y chu·ªói onboarding + nh·∫Øc t√°i mua canh theo chu k·ª≥ median, th√™m incentive l·∫ßn 2 (voucher gi√° tr·ªã nh·ªè).")
        elif repeat_rate < 40:
            strategy_lines.append("Repeat trung b√¨nh: tri·ªÉn khai ƒëi·ªÉm th∆∞·ªüng / bundle ∆∞u ƒë√£i ƒë·ªÉ ƒë·∫©y l·∫ßn mua th·ª© 3.")
        else:
            strategy_lines.append("Repeat cao: chuy·ªÉn tr·ªçng t√¢m sang tƒÉng AOV (bundle cao c·∫•p, g·ª£i √Ω ph·ª• ki·ªán, referral).")

        # Gi√° tr·ªã ƒë∆°n th·∫•p + kho·∫£ng P90
        if median_order_value < 30 and p90_order_value < 80:
            strategy_lines.append(f"Gi√° tr·ªã ƒë∆°n th·∫•p (Median {median_order_value:,.0f}, P90 {p90_order_value:,.0f}): thi·∫øt k·∫ø combo > {int(median_order_value*1.8)} ƒë·ªÉ n√¢ng c·∫•p gi·ªè; highlight free-ship / ng∆∞·ª°ng qu√†.")
        elif p90_median_ratio > 2.2:
            strategy_lines.append(f"Kho·∫£ng c√°ch P90/Median cao ({p90_median_ratio:.2f}): ph√¢n kh√∫c kh√°ch high-value t·∫°o ∆∞u ƒë√£i ri√™ng (VIP tier / early access).")
        elif p90_median_ratio < 1.5:
            strategy_lines.append("P90/Median th·∫•p: b·ªï sung s·∫£n ph·∫©m premium ƒë·ªÉ m·ªü tr·∫ßn chi ti√™u.")

        # Bi·∫øn ƒë·ªông AOV
        if not np.isnan(cv_ov):
            if cv_ov > 1.0:
                strategy_lines.append("CV AOV cao: c√° nh√¢n ho√° upsell theo segment (gi√° tr·ªã ƒë∆°n l·∫ßn g·∫ßn nh·∫•t).")
            elif cv_ov < 0.4:
                strategy_lines.append("CV AOV th·∫•p: d·ªÖ d·ª± b√°o ‚Üí th·ª≠ tƒÉng ng∆∞·ª°ng freeship ho·∫∑c bundle ƒë·ªÉ k√©o AOV l√™n l·ªõp cao h∆°n.")

        # AOV vs P90
        if aov and p90_order_value and aov < p90_order_value * 0.45:
            strategy_lines.append("AOV c√≤n xa nh√≥m kh√°ch chi ti√™u cao ‚Üí th√™m g·ª£i √Ω mua k√®m ·ªü trang gi·ªè / sau thanh to√°n.")

        # T·ªïng h·ª£p n·ªÅn t·∫£ng
        strategy_lines.append("Ph√¢n t√≠ch cohort theo th√°ng nh·∫±m nh·∫≠n di·ªán t·ª∑ tr·ªçng ƒë·∫øn t·ª´ kh√°ch h√†ng quay l·∫°i so v·ªõi kh√°ch h√†ng m·ªõi.")
        strategy_lines.append("Theo d√µi tu·∫ßn c√°c ch·ªâ s·ªë: New Customers, Repeat %, AOV, CAC (ngo·∫°i b·∫£ng).")

        col_analysis, col_strategy = st.columns([4,6])
        with col_analysis:
            st.markdown(f"""
            <div class="analysis-box">
            <h4>üìå Ph√¢n t√≠ch nhanh</h4>
            {'<br>'.join(lines)}
            </div>
            """, unsafe_allow_html=True)
        with col_strategy:
            st.markdown(f"""
            <div class="strategy-box">
            <h4>üéØ G·ª£i √Ω chi·∫øn l∆∞·ª£c t·ªïng th·ªÉ</h4>
            {'<br>'.join('‚Ä¢ ' + s for s in strategy_lines)}
            </div>
            """, unsafe_allow_html=True)

    except Exception as e:
        st.info(f"Kh√¥ng t·∫°o ƒë∆∞·ª£c ph√¢n t√≠ch t·ª± ƒë·ªông (chi ti·∫øt: {e})")

# -------- Ng√†nh h√†ng ----------
with tab_category:
    st.subheader("Ng√†nh h√†ng")
    top_n_cat = st.slider("Top N (theo doanh thu)", 5, 11, 11, key="top_cat")
    cat_df = compute_category_metrics(df, top_n=top_n_cat)
    cat_vn = rename_for_display(cat_df, {
        "category":"Ng√†nh h√†ng","revenue":"Doanh thu","orders":"S·ªë ƒë∆°n",
        "customers":"S·ªë kh√°ch","quantity":"S·ªë l∆∞·ª£ng","revenue_share_%":"T·ª∑ tr·ªçng (%)"
    })
    col1, col2 = st.columns([2,1])
    with col1:
        bar_cat = (alt.Chart(cat_vn)
                   .mark_bar()
                   .encode(
                       x=alt.X("Doanh thu:Q", title="Doanh thu"),
                       y=alt.Y("Ng√†nh h√†ng:N", sort="-x"),
                       tooltip=["Ng√†nh h√†ng","Doanh thu","S·ªë ƒë∆°n","S·ªë kh√°ch","T·ª∑ tr·ªçng (%)"]
                   ).properties(height=400, title="Top ng√†nh h√†ng"))
        st.altair_chart(bar_cat, use_container_width=True)
    with col2:
        pie = (alt.Chart(cat_vn)
               .mark_arc()
               .encode(
                   theta=alt.Theta("Doanh thu:Q"),
                   color=alt.Color("Ng√†nh h√†ng:N"),
                   tooltip=["Ng√†nh h√†ng","Doanh thu","T·ª∑ tr·ªçng (%)"]
               ).properties(title="T·ª∑ tr·ªçng doanh thu"))
        st.altair_chart(pie, use_container_width=True)
    st.dataframe(cat_vn.style.format({
        "Doanh thu":"{:,.0f}","T·ª∑ tr·ªçng (%)":"{:,.2f}","S·ªë l∆∞·ª£ng":"{:,.0f}"
    }), use_container_width=True)

# -------- S·∫£n ph·∫©m ----------
with tab_product:
    st.subheader("S·∫£n ph·∫©m")
    if "product_id" not in df.columns:
        st.info("Thi·∫øu product_id.")
    else:
        top_n_prod = st.slider("Top N s·∫£n ph·∫©m", 5, 100, 38, key="top_prod")
        prod_df = compute_product_metrics(df, top_n=top_n_prod)
        if not prod_df.empty:
            prod_vn = rename_for_display(prod_df, {
                "product_id":"M√£ SP","product_name":"T√™n SP","revenue":"Doanh thu",
                "orders":"S·ªë ƒë∆°n","quantity":"S·ªë l∆∞·ª£ng","customers":"S·ªë kh√°ch",
                "rev_per_order":"Doanh thu/ƒê∆°n"
            })
            bar_prod = (alt.Chart(prod_vn)
                        .mark_bar()
                        .encode(
                            x=alt.X("Doanh thu:Q", title="Doanh thu"),
                            y=alt.Y("T√™n SP:N", sort="-x"),
                            tooltip=["M√£ SP","T√™n SP","Doanh thu","S·ªë ƒë∆°n","S·ªë l∆∞·ª£ng","Doanh thu/ƒê∆°n"]
                        ).properties(height=500, title="Top s·∫£n ph·∫©m"))
            st.altair_chart(bar_prod, use_container_width=True)
            st.dataframe(prod_vn.style.format({
                "Doanh thu":"{:,.0f}","Doanh thu/ƒê∆°n":"{:,.0f}","S·ªë l∆∞·ª£ng":"{:,.0f}"
            }), use_container_width=True)
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m.")

# -------- Kh√°ch h√†ng ----------
with tab_customers:
    st.subheader("Kh√°ch h√†ng")
    cust_full = compute_customer_metrics(df)
    if cust_full.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng.")
    else:
        top_n_cust = st.slider("Top N kh√°ch h√†ng (theo S·ªë ƒë∆°n)", 5, 300, 10, key="top_cust_v3")
        top_cust = cust_full.sort_values("orders", ascending=False).head(top_n_cust).copy()

        mapping = {
            "customer_id": "M√£ KH",
            "orders": "S·ªë ƒë∆°n",
            "revenue": "Doanh thu",
            "avg_order_value_customer": "Gi√° tr·ªã TB/ƒê∆°n (KH)",
            "first_date": "Ng√†y ƒë·∫ßu",
            "last_date": "Ng√†y cu·ªëi",
            "lifetime_days": "S·ªë ng√†y v√≤ng ƒë·ªùi"
        }
        top_vn = rename_for_display(top_cust, mapping)

        st.markdown("#### Top kh√°ch h√†ng mua s·∫Øm nhi·ªÅu nh·∫•t (theo S·ªë ƒë∆°n)")
        chart_top = (alt.Chart(top_vn)
                     .mark_bar()
                     .encode(
                         x=alt.X("S·ªë ƒë∆°n:Q", title="S·ªë ƒë∆°n", axis=alt.Axis(tickMinStep=1, format='d')),
                         y=alt.Y("M√£ KH:N", sort="-x"),
                         tooltip=["M√£ KH","S·ªë ƒë∆°n","Doanh thu","Gi√° tr·ªã TB/ƒê∆°n (KH)"]
                     ).properties(height=400))
        st.altair_chart(chart_top, use_container_width=True)

        st.dataframe(top_vn.style.format({
            "S·ªë ƒë∆°n":"{:,.0f}",
            "Doanh thu":"{:,.0f}",
            "Gi√° tr·ªã TB/ƒê∆°n (KH)":"{:,.0f}"
        }), use_container_width=True)

        st.markdown("#### Ph√¢n b·ªë S·ªë kh√°ch h√†ng / S·ªë ƒë∆°n (Histogram n·∫±m ngang)")
        freq_dist = (cust_full.groupby("orders")
                                .size()
                                .reset_index(name="num_customers")
                                .sort_values("orders"))
        if not freq_dist.empty:
            min_o = int(freq_dist["orders"].min())
            max_o = int(freq_dist["orders"].max())
            full_range = pd.DataFrame({"orders": list(range(min_o, max_o + 1))})
            freq_dist = full_range.merge(freq_dist, on="orders", how="left").fillna({"num_customers": 0})
        freq_dist["orders"] = freq_dist["orders"].astype(int)
        total_customers_all = freq_dist["num_customers"].sum()
        freq_dist["share_%"] = np.where(total_customers_all > 0,
                                        freq_dist["num_customers"] / total_customers_all * 100, 0.0)
        freq_dist["cum_share_%"] = freq_dist["share_%"].cumsum()

        freq_vn = freq_dist.rename(columns={
            "orders":"S·ªë ƒë∆°n",
            "num_customers":"S·ªë KH",
            "share_%":"T·ª∑ tr·ªçng (%)",
            "cum_share_%":"T·ª∑ tr·ªçng l≈©y k·∫ø (%)"
        })

        chart_dist = (alt.Chart(freq_vn)
                      .mark_bar()
                      .encode(
                          y=alt.Y("S·ªë ƒë∆°n:O", title="S·ªë ƒë∆°n", sort=None),
                          x=alt.X("S·ªë KH:Q", title="S·ªë kh√°ch"),
                          tooltip=["S·ªë ƒë∆°n","S·ªë KH","T·ª∑ tr·ªçng (%)","T·ª∑ tr·ªçng l≈©y k·∫ø (%)"]
                      ).properties(height=400, title="Histogram ngang: S·ªë KH theo S·ªë ƒë∆°n"))
        st.altair_chart(chart_dist, use_container_width=True)

        st.dataframe(
            freq_vn.style.format({
                "S·ªë KH":"{:,.0f}",
                "T·ª∑ tr·ªçng (%)":"{:,.2f}",
                "T·ª∑ tr·ªçng l≈©y k·∫ø (%)":"{:,.2f}"
            }),
            use_container_width=True
        )

        st.markdown("""
        <div class="info-box">
        <b>Di·ªÖn gi·∫£i</b><br>
        - Tr·ª•c d·ªçc: S·ªë ƒë∆°n (1,2,3...). Tr·ª•c ngang: s·ªë l∆∞·ª£ng kh√°ch t∆∞∆°ng ·ª©ng.<br>
        - Bin tr·ªëng hi·ªÉn th·ªã = 0 gi√∫p th·∫•y kho·∫£ng h√†nh vi ch∆∞a l·∫•p ƒë·∫ßy.<br>
        - C√≥ th·ªÉ d√πng T·ª∑ tr·ªçng l≈©y k·∫ø ƒë·ªÉ ch·ªçn ng∆∞·ª°ng kh√°ch trung th√†nh (v√≠ d·ª• ‚â•3 ƒë∆°n).<br>
        </div>
        """, unsafe_allow_html=True)

# -------- Ph√¢n t√≠ch n√¢ng cao ----------
with tab_adv_product:
    st.subheader("Ph√¢n t√≠ch n√¢ng cao")
    adv_df, observed_days_total = compute_product_advanced(df)
    if adv_df.empty:
        st.info("Thi·∫øu d·ªØ li·ªáu s·∫£n ph·∫©m ƒë·ªÉ ph√¢n t√≠ch n√¢ng cao.")
    else:
        view_vn = rename_for_display(adv_df, {
            "product_id":"M√£ SP","product_name":"T√™n SP",
            "first_sale":"Ng√†y b√°n ƒë·∫ßu","last_sale":"Ng√†y b√°n cu·ªëi",
            "lifecycle_days":"S·ªë ng√†y v√≤ng ƒë·ªùi","days_since_last":"S·ªë ng√†y t·ª´ l·∫ßn cu·ªëi",
            "active_days":"S·ªë ng√†y c√≥ b√°n","coverage":"T·ª∑ l·ªá ng√†y c√≥ b√°n",
            "total_units":"T·ªïng SL","total_revenue":"T·ªïng doanh thu",
            "customers_total":"S·ªë KH","customers_repeat":"KH mua l·∫∑p",
            "repeat_rate_product":"T·ª∑ l·ªá mua l·∫°i","mean_daily_all":"SL TB/ng√†y",
            "std_daily_all":"ƒê·ªô l·ªách chu·∫©n/ng√†y","demand_cv":"CV nhu c·∫ßu",
            "variability_class":"Ph√¢n lo·∫°i bi·∫øn ƒë·ªông",
            "interpurchase_median_days":"Trung v·ªã chu k·ª≥ mua",
            "interpurchase_mean_days":"TB chu k·ª≥ mua",
            "abc_class":"ABC","cum_share":"T·ª∑ tr·ªçng l≈©y k·∫ø (%)"
        })
        st.write(f"T·ªïng ng√†y quan s√°t: {observed_days_total}")
        st.dataframe(view_vn.style.format({
            "T·ªïng doanh thu":"{:,.0f}",
            "T·ª∑ l·ªá ng√†y c√≥ b√°n":"{:,.2f}",
            "T·ª∑ l·ªá mua l·∫°i":"{:,.2f}",
            "SL TB/ng√†y":"{:,.2f}",
            "ƒê·ªô l·ªách chu·∫©n/ng√†y":"{:,.2f}",
            "CV nhu c·∫ßu":"{:,.2f}",
            "Trung v·ªã chu k·ª≥ mua":"{:,.1f}",
            "TB chu k·ª≥ mua":"{:,.1f}",
            "T·ª∑ tr·ªçng l≈©y k·∫ø (%)":"{:,.2f}"
        }), use_container_width=True, height=520)

        st.markdown("##### Ph√¢n b·ªë v√≤ng ƒë·ªùi (S·ªë ng√†y v√≤ng ƒë·ªùi)")
        lifecycle_hist = (alt.Chart(view_vn)
                          .mark_bar()
                          .encode(
                              alt.X("S·ªë ng√†y v√≤ng ƒë·ªùi:Q", bin=alt.Bin(maxbins=30), title="S·ªë ng√†y v√≤ng ƒë·ªùi"),
                              y=alt.Y("count():Q", title="S·ªë SP"),
                              tooltip=[alt.Tooltip("count():Q", title="S·ªë SP")]
                          ).properties(height=250))
        st.altair_chart(lifecycle_hist, use_container_width=True)

        st.markdown("""
        <div class="abc-box">
        <b>ƒê·ªãnh nghƒ©a nh√≥m ABC</b><br>
        - <b>Nh√≥m A</b>: C·ªông d·ªìn ƒë·∫øn 80% doanh thu.<br>
        - <b>Nh√≥m B</b>: 80% ‚Üí 95%.<br>
        - <b>Nh√≥m C</b>: 5% c√≤n l·∫°i.<br>
        Khuy·∫øn ngh·ªã: ∆Øu ti√™n A, t·ªëi ∆∞u B, tinh g·ªçn C.
        </div>
        """, unsafe_allow_html=True)

        st.markdown("##### Scatter: CV nhu c·∫ßu vs T·ª∑ l·ªá mua l·∫°i")
        scatter = (alt.Chart(view_vn)
                   .mark_circle(size=60, opacity=0.7)
                   .encode(
                       x=alt.X("CV nhu c·∫ßu:Q", title="CV nhu c·∫ßu"),
                       y=alt.Y("T·ª∑ l·ªá mua l·∫°i:Q", title="T·ª∑ l·ªá mua l·∫°i"),
                       color=alt.Color(
                           "ABC:N",
                           title="ABC",
                           scale=alt.Scale(domain=["A","B","C"], range=["#2ca02c","#ffbf00","#d62728"])
                       ),
                       tooltip=["M√£ SP","T√™n SP","T·ªïng doanh thu","T·ª∑ l·ªá mua l·∫°i","CV nhu c·∫ßu","Ph√¢n lo·∫°i bi·∫øn ƒë·ªông"]
                   ).properties(height=350))
        st.altair_chart(scatter, use_container_width=True)

# -------- Heatmap tu·∫ßn ----------
with tab_heatmap:
    st.subheader("Heatmap theo ng√†y trong tu·∫ßn")
    weekday_df = compute_weekday_summary(df)
    if not weekday_df.empty:
        mapping_weekday = {0:"Th·ª© 2",1:"Th·ª© 3",2:"Th·ª© 4",3:"Th·ª© 5",4:"Th·ª© 6",5:"Th·ª© 7",6:"CN"}
        weekday_df["Th·ª©"] = weekday_df["weekday"].map(mapping_weekday)
        wd_vn = weekday_df.rename(columns={"revenue":"Doanh thu","orders":"S·ªë ƒë∆°n"})
        # Bi·ªÉu ƒë·ªì: d√πng bar + m√†u theo c∆∞·ªùng ƒë·ªô ƒë·ªÉ gi·ªëng "heat"
        heat_chart = (alt.Chart(wd_vn)
                      .mark_bar()
                      .encode(
                          x=alt.X("Th·ª©:N", sort=["Th·ª© 2","Th·ª© 3","Th·ª© 4","Th·ª© 5","Th·ª© 6","Th·ª© 7","CN"]),
                          y=alt.Y("Doanh thu:Q", title="Doanh thu"),
                          color=alt.Color("Doanh thu:Q", scale=alt.Scale(scheme="blues"), title=""),
                          tooltip=["Th·ª©","Doanh thu:Q","S·ªë ƒë∆°n:Q"]
                      ).properties(height=320, title=""))
        st.altair_chart(heat_chart, use_container_width=True)

        # G·ª£i √Ω t·ªëi ∆∞u theo ng√†y tu·∫ßn
        worst_row = wd_vn.loc[wd_vn["Doanh thu"].idxmin()]
        best_row = wd_vn.loc[wd_vn["Doanh thu"].idxmax()]
        worst_day = worst_row["Th·ª©"]
        best_day = best_row["Th·ª©"]
        ratio = (best_row["Doanh thu"] / worst_row["Doanh thu"]) if worst_row["Doanh thu"] else np.nan
        weekday_suggestions = []
        weekday_suggestions.append(f"Ng√†y doanh thu th·∫•p nh·∫•t: {worst_day} (‚âà {worst_row['Doanh thu']:,.0f}). Cao nh·∫•t: {best_day} (‚âà {best_row['Doanh thu']:,.0f}).")
        if not np.isnan(ratio) and ratio >= 1.6:
            weekday_suggestions.append(f"Ch√™nh l·ªách cao (g·∫•p {ratio:.1f} l·∫ßn): ∆∞u ti√™n tri·ªÉn khai chi·∫øn d·ªãch c·ª©u {worst_day}.")
        weekday_suggestions.append(f"ƒê·ªÅ xu·∫•t: ƒë·∫©y flash sale / combo x·∫£ t·ªìn / voucher r√†ng bu·ªôc t·ªëi thi·ªÉu v√†o {worst_day}.")
        weekday_suggestions.append("A/B test th√¥ng ƒëi·ªáp gi√° tr·ªã kh√°c nhau cho ng√†y y·∫øu (v√≠ d·ª•: freeship ng∆∞·ª°ng th·∫•p h∆°n).")
        weekday_suggestions.append("T·∫≠n d·ª•ng retarget kh√°ch ƒë√£ xem s·∫£n ph·∫©m nh∆∞ng ch∆∞a mua trong 3 ng√†y g·∫ßn nh·∫•t v√†o ng√†y y·∫øu.")

        st.markdown(f"""
        <div class="weekday-box">
        <b>G·ª£i √Ω t·ªëi ∆∞u theo ng√†y trong tu·∫ßn</b><br>
        {'<br>'.join(weekday_suggestions)}
        </div>
        """, unsafe_allow_html=True)
    else:
        st.warning("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ x√¢y d·ª±ng heatmap tu·∫ßn.")

# -------- Xu·∫•t d·ªØ li·ªáu ----------
with tab_download:
    st.subheader("Xu·∫•t d·ªØ li·ªáu")
    def convert_df(dff):
        return dff.to_csv(index=False).encode("utf-8-sig")
    daily_metrics = compute_daily_metrics(df)
    cat_df = compute_category_metrics(df)
    prod_df = compute_product_metrics(df)
    cust_df_all = compute_customer_metrics(df)
    adv_df_export, _ = compute_product_advanced(df)
    st.download_button("‚¨áÔ∏è Daily metrics", data=convert_df(daily_metrics), file_name="daily_metrics.csv")
    st.download_button("‚¨áÔ∏è Category metrics", data=convert_df(cat_df), file_name="category_metrics.csv")
    if not prod_df.empty:
        st.download_button("‚¨áÔ∏è Product metrics", data=convert_df(prod_df), file_name="product_metrics.csv")
    if not cust_df_all.empty:
        st.download_button("‚¨áÔ∏è Customer metrics", data=convert_df(cust_df_all), file_name="customer_metrics.csv")
    if not adv_df_export.empty:
        st.download_button("‚¨áÔ∏è Advanced product (full)", data=convert_df(adv_df_export), file_name="product_advanced.csv")

st.markdown("---")
st.markdown(
    "<div style='text-align:left; color:#666; font-size:13px; margin-top:30px;'>¬© 2025 ƒê·ªì √°n t·ªët nghi·ªáp l·ªõp DL07_K306 - RFM Segmentation - Nh√≥m J</div>",
    unsafe_allow_html=True
)
